name: Publish Release
on:
  push:
    tags: ['v**']

jobs:
  build-linux:
    name: Build Linux Artifacts

    strategy:
      matrix:
        include:
          - target: i586-unknown-linux-musl
            build-options: []
          - target: i686-unknown-linux-musl
            build-options: []
          - target: x86_64-unknown-linux-gnu
            build-options: []
          - target: x86_64-unknown-linux-musl
            build-options: []
          - target: aarch64-unknown-linux-gnu
            build-options: [cross]
          - target: aarch64-unknown-linux-musl
            build-options: [cross]
          - target: armv7-unknown-linux-gnueabihf
            build-options: [cross]
          - target: armv7-unknown-linux-musleabihf
            build-options: [cross]

    runs-on: 'ubuntu-latest'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: '${{ matrix.target }}'
          override: true
          default: true

      - name: 'Build binary for ${{ matrix.target }}'
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ contains(matrix.build-options, 'cross') }}
          command: build
          args: '--all-features --target ${{ matrix.target }} --release'

      - name: Upload artifact
        uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.target }}
          path: target/${{ matrix.target }}/release/templar

  build-windows:
    name: Build Windows Artifacts

    strategy:
      matrix:
        include:
          - toolchain: stable-msvc
            target: x86_64-pc-windows-msvc
          - toolchain: stable
            target: x86_64-pc-windows-gnu

    runs-on: 'windows-latest'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: '${{ matrix.target }}'
          override: true
          default: true

      - name: 'Build binary for ${{ matrix.target }}'
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: '--all-features --target ${{ matrix.target }} --release'

      - name: Upload Windows artifact
        uses: actions/upload-artifact@master
        with:
          name: '${{ matrix.target }}'
          path: target/${{ matrix.target }}/release/*.exe

  build-macos:
    name: Build Mac Artifacts
    runs-on: 'macos-latest'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: 'x86_64-apple-darwin'

      - name: 'Build binary for x86_64-apple-darwin'
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: '--all-features --release'

      - name: Upload Mac artifact
        uses: actions/upload-artifact@master
        with:
          name: x86_64-apple-darwin
          path: target/release/templar

  new-release:
    name: Create new release
    runs-on: 'ubuntu-latest'
    needs: ['build-linux', 'build-macos', 'build-windows']
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ''
          draft: false
          prerelease: false

  release-tar-xz:
    name: Upload Tarballs
    runs-on: 'ubuntu-latest'
    needs: ['new-release']
    strategy:
      matrix:
        include:
          - target: i586-unknown-linux-musl
          - target: i686-unknown-linux-musl
          - target: x86_64-unknown-linux-gnu
          - target: x86_64-unknown-linux-musl
          - target: aarch64-unknown-linux-gnu
          - target: aarch64-unknown-linux-musl
          - target: armv7-unknown-linux-gnueabihf
          - target: armv7-unknown-linux-musleabihf
          - target: x86_64-apple-darwin

    steps:
      - name: Pull ${{ matrix.target }}
        uses: actions/download-artifact@master
        with:
          name: ${{ matrix.target }}

      - name: Package tarball
        run: |-
          chmod +x templar
          tar -cJf 'templar-${{ matrix.target }}.tar.xz' templar

      - name: Upload Release Assets
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.new-release.outputs.upload_url }}
          asset_path: ./templar-${{ matrix.target }}.tar.xz
          asset_name: templar-${{ matrix.target }}.tar.xz
          asset_content_type: application/x-gtar

  release-zip:
    name: Upload Zipfiles
    runs-on: 'ubuntu-latest'
    needs: ['new-release']
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
          - target: x86_64-pc-windows-gnu

    steps:
      - name: Pull ${{ matrix.target }}
        uses: actions/download-artifact@master
        with:
          name: ${{ matrix.target }}

      - name: Zip it up
        run: zip 'templar-${{ matrix.target }}.zip' templar.exe

      - name: Upload Release Assets
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.new-release.outputs.upload_url }}
          asset_path: ./templar-${{ matrix.target }}.zip
          asset_name: templar-${{ matrix.target }}.zip
          asset_content_type: application/zip
